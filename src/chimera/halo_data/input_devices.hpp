// SPDX-License-Identifier: GPL-3.0-only

#ifndef CHIMERA_INPUT_DEVICES_HPP
#define CHIMERA_INPUT_DEVICES_HPP

#include <cstdint>
#include <dinput.h>
#include "pad.hpp"

namespace Chimera {
    struct InputGlobals {
        struct UnknownStructure {
            std::int32_t milliseconds;
            std::int16_t unknown;
        };
        static_assert(sizeof(UnknownStructure) == 0x08);

        struct BufferedKey {
            std::int8_t  modifiers; // ALT : CONTROL : SHIFT (LSB)
            std::int8_t  character; // If the event was generated by `WM_CHAR` or `WM_SYSCHAR`: the lower byte of wParam
                                    // If the event was generated by `WM_KEYDOWN` or `WM_SYSKEYDOWN`: `-1`
            std::int16_t keycode;   // internally translated, need work on this
        };
        static_assert(sizeof(BufferedKey) == 0x04 && alignof(BufferedKey) == 0x02);

        struct MouseState {
            std::int32_t horizontal; ///< Horizontal mouse movement.
            std::int32_t vertical;   ///< Vertical mouse movement.
            std::int32_t wheel;      ///< Comes divided by granularity, if granularity is non-zero.

            /**
             * Indicates how long a mouse button has been held for.
             *
             * For every update of the mouse state, if a mouse button is down, then its
             * value this array increments up to `255`. If the button is not down, then
             * the value is set to `0`.
             *
             * Device state query rate is (generally) tied to framerate.
             * For high framerates, these button values reach the maximum quite quickly.
             */
            std::uint8_t button_state[8];

            /** \brief Indicates that a mouse button has been released.
             *
             * Contains a non-zero value if the button has transitioned from a pressed
             * state to a released state.
             *
             * Effectively, this indicates that the corresponding value in #button_state
             * has gone from a non-zero value to `0`.
             */
            bool button_changed[8];
        }; static_assert(sizeof(MouseState) == 0x1C);

        /** If `true`, the enumerated devices are acquired, otherwise they are not acquired. */
        bool devices_acquired;

        /**
         * A switch that forces Halo to use various virtual input state buffers.
         *
         * This is never set `true` by Halo, but all the mechanisms that change input
         * behavior are still implemented. 
         * For instance, if this value is `true`, then `enumerated_devices.direct_mouse_state`
         * is ignored and mouse input is pulled from `enumerated_devices.virtual_mouse_state`.
         *
         * This value is set to `false` when the input devices are unacquired.
         */
        bool use_virtual_input;

        LPDIRECTINPUT8 direct_input; ///< The `DirectInput` interface.

        UnknownStructure unknown0[4]; // possibly last time of device update for each local player
        PAD(0x6D);
        PAD(0x6D);

        struct {
            std::int16_t read_index; ///< The index within #keys to start reading input from.
            std::int16_t count;      ///< The number of inputs stored in #keys.
            BufferedKey  keys[0x40]; ///< Stored key presses.
        } buffered_keys; // this gets used in custom_chat.cpp

        struct {
            /**
             * A device interface for the system keyboard device.
             *
             * The data format for this interface is `c_dfDIKeyboard`.
             */
            LPDIRECTINPUTDEVICE direct_keyboard;

            /** 
             * A device interface for the system mouse device.
             *
             * The data format for this interface is `c_dfDIMouse2`, for which
             * `DIMOUSESTATE2` is appropriate for querying this device's buffered state.
             */
            LPDIRECTINPUTDEVICE direct_mouse;
            std::uint32_t       direct_mouse_z_granularity; ///< Granularity for the z-axis (mouse wheel).
            MouseState          direct_mouse_state;  ///< The mouse state as *translated* from `direct_mouse->GetDeviceState()`.
            MouseState          virtual_mouse_state; ///< Never written to by `Halo`, see #use_virtual_input.
                                                     ///< Presumably this used to be part of some harness
                                                     ///< for providing programmed control over the game.

            std::int16_t        next_joystick; ///< The index of the next unoccupied joystick slot in #direct_joysticks.
            LPDIRECTINPUTDEVICE direct_joysticks[8]; ///< Interfaces for the registered gamepad/joystick devices.
            std::uint8_t        direct_joysticks_states[0x240][8]; // joystick state
        } enumerated_devices;
        
        /** 
         * Get the input device and state globals
         * @return reference to the input globals
         */
        static InputGlobals &get_input_globals();
    };
    static_assert(sizeof(InputGlobals) == 0x1470);
}

#endif